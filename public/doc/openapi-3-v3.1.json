{
  "openapi": "3.0.0",
  "info": {
    "description": "Sources",
    "version": "3.1.0",
    "title": "Sources",
    "contact": {
      "email": "support@redhat.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "security": [
    {
      "UserSecurity": []
    }
  ],
  "tags": [
    {
      "description": "Endpoints related to application metadata",
      "name": "app metadata"
    },
    {
      "description": "Endpoints related to applications",
      "name": "applications"
    },
    {
      "description": "Endpoints related to application authentications",
      "name": "application authentications"
    },
    {
      "description": "Endpoints related to application types",
      "name": "application types"
    },
    {
      "description": "Endpoints related to authentication",
      "name": "authentications"
    },
    {
      "description": "Endpoints related to endpoints",
      "name": "endpoints"
    },
    {
      "description": "Endpoints related to Red Hat Connector Connecctions",
      "name": "rhc-connections"
    },
    {
      "description": "Endpoints related to sources",
      "name": "sources"
    },
    {
      "description": "Endpoints related to source types",
      "name": "source types"
    }
  ],
  "paths": {
    "/application_authentications": {
      "get": {
        "summary": "List ApplicationAuthentications",
        "operationId": "listAllApplicationAuthentications",
        "description": "Returns an array of ApplicationAuthentication objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "ApplicationAuthentications collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationAuthenticationsCollection"
                }
              }
            }
          }
        },
        "tags": ["application authentications"]
      },
      "post": {
        "summary": "Create a new ApplicationAuthentication",
        "operationId": "createApplicationAuthentication",
        "description": "Creates a ApplicationAuthentication object",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationAuthentication"
              }
            }
          },
          "description": "ApplicationAuthentication attributes to create",
          "required": true
        },
        "responses": {
          "201": {
            "description": "ApplicationAuthentication creation successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationAuthentication"
                }
              }
            }
          }
        },
        "tags": ["application authentications"]
      }
    },
    "/application_authentications/{id}": {
      "get": {
        "summary": "Show an existing ApplicationAuthentication",
        "operationId": "showApplicationAuthentication",
        "description": "Returns a ApplicationAuthentication object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "ApplicationAuthentication info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationAuthentication"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["application authentications"]
      },
      "patch": {
        "summary": "Update an existing ApplicationAuthentication",
        "operationId": "updateApplicationAuthentication",
        "description": "Updates a ApplicationAuthentication object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationAuthentication"
              }
            }
          },
          "description": "ApplicationAuthentication attributes to update",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Updated, no content"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["application authentications"]
      },
      "delete": {
        "summary": "Delete an existing ApplicationAuthentication",
        "operationId": "deleteApplicationAuthentication",
        "description": "Deletes a ApplicationAuthentication object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "204": {
            "description": "ApplicationAuthentication deleted"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["application authentications"]
      }
    },
    "/application_types": {
      "get": {
        "summary": "List ApplicationTypes",
        "operationId": "listApplicationTypes",
        "description": "Returns an array of ApplicationType objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "ApplicationTypes collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationTypesCollection"
                }
              }
            }
          }
        },
        "tags": ["application types"]
      }
    },
    "/application_types/{id}": {
      "get": {
        "summary": "Show an existing ApplicationType",
        "operationId": "showApplicationType",
        "description": "Returns a ApplicationType object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "ApplicationType info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationType"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["application types"]
      }
    },
    "/application_types/{id}/sources": {
      "get": {
        "summary": "List Sources for ApplicationType",
        "operationId": "listApplicationTypeSources",
        "description": "Returns an array of Source objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          },
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Sources collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourcesCollection"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["application types"]
      }
    },
    "/application_types/{id}/app_meta_data": {
      "get": {
        "summary": "List AppMetaData for ApplicationType",
        "operationId": "listApplicationTypeAppMetaData",
        "description": "Returns an array of AppMetaData objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          },
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "AppMetaData collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppMetaDataCollection"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["application types"]
      }
    },
    "/applications": {
      "get": {
        "summary": "List Applications",
        "operationId": "listApplications",
        "description": "Returns an array of Application objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "Applications collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationsCollection"
                }
              }
            }
          }
        },
        "tags": ["applications"]
      },
      "post": {
        "summary": "Create a new Application",
        "operationId": "createApplication",
        "description": "Creates a Application object",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Application"
              }
            }
          },
          "description": "Application attributes to create",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Application creation successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          }
        },
        "tags": ["applications"]
      }
    },
    "/applications/{id}": {
      "get": {
        "summary": "Show an existing Application",
        "operationId": "showApplication",
        "description": "Returns a Application object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Application info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["applications"]
      },
      "patch": {
        "summary": "Update an existing Application",
        "operationId": "updateApplication",
        "description": "Updates a Application object.\n\nIn case Application object is paused then allowed attributes for update action are: \n\n `availability_status, availability_status_error, last_checked_at, last_available_at`",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Application"
              }
            }
          },
          "description": "Application attributes to update",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Updated, no content"
          },
          "207" : {
            "description": "Multi-status, some parameters are unpermitted due to paused resource(or related) but some parameters are valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity due to paused resource or paused related resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorUnpermittedParameters"
                }
              }
            }
          }
        },
        "tags": ["applications"]
      },
      "delete": {
        "summary": "Delete an existing Application",
        "operationId": "deleteApplication",
        "description": "Deletes a Application object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Application deleted"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["applications"]
      }
    },
    "/applications/{id}/authentications": {
      "get": {
        "summary": "List Authentications for Application",
        "operationId": "listApplicationAuthentications",
        "description": "Returns an array of Authentication objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          },
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Authentications collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationsCollection"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["applications"]
      }
    },
    "/applications/{id}/pause": {
      "post": {
        "summary": "Pauses an Application",
        "operationId": "pauseApplication",
        "description": "Pauses an Application",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Application Paused"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["applications"]
      }
    },
    "/applications/{id}/unpause": {
      "post": {
        "summary": "Un-Pauses an Application",
        "operationId": "unpauseApplication",
        "description": "Un-Pauses an Application",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "202": {
            "description": "Application Un-Paused"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["applications"]
      }
    },
    "/authentications": {
      "get": {
        "summary": "List Authentications",
        "operationId": "listAuthentications",
        "description": "Returns an array of Authentication objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "Authentications collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationsCollection"
                }
              }
            }
          }
        },
        "tags": ["authentications"]
      },
      "post": {
        "summary": "Create a new Authentication",
        "operationId": "createAuthentication",
        "description": "Creates a Authentication object",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Authentication"
              }
            }
          },
          "description": "Authentication attributes to create",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Authentication creation successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authentication"
                }
              }
            }
          }
        },
        "tags": ["authentications"]
      }
    },
    "/authentications/{id}": {
      "get": {
        "summary": "Show an existing Authentication",
        "operationId": "showAuthentication",
        "description": "Returns a Authentication object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authentication"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["authentications"]
      },
      "patch": {
        "summary": "Update an existing Authentication",
        "operationId": "updateAuthentication",
        "description": "Updates a Authentication object.\n\nIn case Authentication object is paused then allowed attributes for update action are: \n\n `availability_status, availability_status_error, last_checked_at, last_available_at`",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Authentication"
              }
            }
          },
          "description": "Authentication attributes to update",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Updated, no content"
          },
          "207" : {
            "description": "Multi-status, some parameters are unpermitted due to paused resource(or related) but some parameters are valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity due to paused resource or paused related resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorUnpermittedParameters"
                }
              }
            }
          }
        },
        "tags": ["authentications"]
      },
      "delete": {
        "summary": "Delete an existing Authentication",
        "operationId": "deleteAuthentication",
        "description": "Deletes a Authentication object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Authentication deleted"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["authentications"]
      }
    },
    "/endpoints": {
      "get": {
        "summary": "List Endpoints",
        "operationId": "listEndpoints",
        "description": "Returns an array of Endpoint objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoints collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointsCollection"
                }
              }
            }
          }
        },
        "tags": ["endpoints"]
      },
      "post": {
        "summary": "Create a new Endpoint",
        "operationId": "createEndpoint",
        "description": "Creates a Endpoint object",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointCreate"
              }
            }
          },
          "description": "Endpoint attributes to create",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Endpoint creation successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Endpoint"
                }
              }
            }
          }
        },
        "tags": ["endpoints"]
      }
    },
    "/endpoints/{id}": {
      "get": {
        "summary": "Show an existing Endpoint",
        "operationId": "showEndpoint",
        "description": "Returns a Endpoint object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Endpoint"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["endpoints"]
      },
      "patch": {
        "summary": "Update an existing Endpoint",
        "operationId": "updateEndpoint",
        "description": "Updates a Endpoint object.\n\nIn case Endpoint object is paused then allowed attributes for update action are: \n\n `availability_status, availability_status_error, last_checked_at, last_available_at`",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Endpoint"
              }
            }
          },
          "description": "Endpoint attributes to update",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Updated, no content"
          },
          "207" : {
            "description": "Multi-status, some parameters are unpermitted due to paused resource(or related) but some parameters are valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity due to paused resource or paused related resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorUnpermittedParameters"
                }
              }
            }
          }
        },
        "tags": ["endpoints"]
      },
      "delete": {
        "summary": "Delete an existing Endpoint",
        "operationId": "deleteEndpoint",
        "description": "Deletes a Endpoint object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Endpoint deleted"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["endpoints"]
      }
    },
    "/endpoints/{id}/authentications": {
      "get": {
        "summary": "List Authentications for Endpoint",
        "operationId": "listEndpointAuthentications",
        "description": "Returns an array of Authentication objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          },
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Authentications collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationsCollection"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["endpoints"]
      }
    },
    "/graphql": {
      "post": {
        "summary": "Perform a GraphQL Query",
        "operationId": "postGraphQL",
        "description": "Performs a GraphQL Query",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GraphQLRequest"
              }
            }
          },
          "description": "GraphQL Query Request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "GraphQL Query Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GraphQLResponse"
                }
              }
            }
          }
        }
      }
    },
    "/openapi.json": {
      "get": {
        "summary": "Return this API document in JSON format",
        "operationId": "getDocumentation",
        "responses": {
          "200": {
            "description": "The API document for this version of the API",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/rhc_connections": {
      "get": {
        "description": "Returns an array of Red Hat Connector Connections",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          },
          {
            "$ref": "#/components/parameters/x-rh-identity"
          },
          {
            "$ref": "#/components/parameters/x-rh-sources-psk"
          }
        ],
        "responses": {
          "200": {
            "description": "RHC Connections collection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RhcConnectionRead"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "operationId": "getRhcConnections",
        "summary": "List RHC Connections",
        "tags": [
          "rhc-connections"
        ]
      },
      "post": {
        "description": "Create a new Red Hat Connector Connection",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-rh-identity"
          },
          {
            "$ref": "#/components/parameters/x-rh-sources-psk"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RhcConnectionCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Connection created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RhcConnectionRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "operationId": "postRhcConnection",
        "summary": "Create a new RHC Connection",
        "tags": [
          "rhc-connections"
        ]
      }
    },
    "/rhc_connections/{id}": {
      "get": {
        "description": "Returns a single Red Hat Connector Connection",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Red Hat Connector connection object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RhcConnectionRead"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "getRhcConnection",
        "summary": "Get an existing RHC Connection",
        "tags": [
          "rhc-connections"
        ]
      },
      "patch": {
        "description": "Updates a Red Hat Connector Connection",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RhcConnectionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Red Hat Connector connection object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RhcConnectionRead"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "updateRhcConnection",
        "summary": "Update an RHC Connection",
        "tags": [
          "rhc-connections"
        ]
      },
      "delete": {
        "description": "Deletes a Red Hat Connector Connection",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "204": {
            "description": "The connection has been deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "deleteRhcConnection",
        "summary": "Delete an RHC Connection",
        "tags": [
          "rhc-connections"
        ]
      }
    },
    "/rhc_connections/{id}/sources": {
      "get": {
        "description": "Returns an array of sources related to the provided Red Hat Connector Connection",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          },
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          },
          {
            "$ref": "#/components/parameters/x-rh-identity"
          },
          {
            "$ref": "#/components/parameters/x-rh-sources-psk"
          }
        ],
        "responses": {
          "200": {
            "description": "Sources collection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SourcesCollection"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "getRhcConnectionSources",
        "summary": "List sources related to an RHC Connection",
        "tags": [
          "sources",
          "rhc-connections"
        ]
      }
    },
    "/sources/{id}/rhc_connections": {
      "get": {
        "description": "Returns an array of Red Hat Connector Connections related to the provided source",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          },
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          },
          {
            "$ref": "#/components/parameters/x-rh-identity"
          },
          {
            "$ref": "#/components/parameters/x-rh-sources-psk"
          }
        ],
        "responses": {
          "200": {
            "description": "Red Hat Connector Collections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RhcConnectionCollection"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "getSourcesRhcConnection",
        "summary": "List RHC Connections related to a source",
        "tags": [
          "sources",
          "rhc-connections"
        ]
      }
    },
    "/source_types": {
      "get": {
        "summary": "List SourceTypes",
        "operationId": "listSourceTypes",
        "description": "Returns an array of SourceType objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "SourceTypes collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTypesCollection"
                }
              }
            }
          }
        },
        "tags": ["source types"]
      }
    },
    "/source_types/{id}": {
      "get": {
        "summary": "Show an existing SourceType",
        "operationId": "showSourceType",
        "description": "Returns a SourceType object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "SourceType info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceType"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["source types"]
      }
    },
    "/source_types/{id}/sources": {
      "get": {
        "summary": "List Sources for SourceType",
        "operationId": "listSourceTypeSources",
        "description": "Returns an array of Source objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          },
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Sources collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourcesCollection"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["source types"]
      }
    },
    "/sources": {
      "get": {
        "summary": "List Sources",
        "operationId": "listSources",
        "description": "Returns an array of Source objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "Sources collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourcesCollection"
                }
              }
            }
          }
        },
        "tags": ["sources"]
      },
      "post": {
        "summary": "Create a new Source",
        "operationId": "createSource",
        "description": "Creates a Source object",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Source"
              }
            }
          },
          "description": "Source attributes to create",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Source creation successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          }
        },
        "tags": ["sources"]
      }
    },
    "/sources/{id}": {
      "get": {
        "summary": "Show an existing Source",
        "operationId": "showSource",
        "description": "Returns a Source object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Source info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["sources"]
      },
      "patch": {
        "summary": "Update an existing Source",
        "operationId": "updateSource",
        "description": "Updates a Source object.\n\nIn case Source object is paused then allowed attributes for update action are: \n\n `availability_status, last_checked_at, last_available_at`",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Source"
              }
            }
          },
          "description": "Source attributes to update",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Updated, no content"
          },
          "207" : {
            "description": "Multi-status, some parameters are unpermitted due to paused resource(or related) but some parameters are valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity due to paused resource or paused related resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorUnpermittedParameters"
                }
              }
            }
          }
        },
        "tags": ["sources"]
      },
      "delete": {
        "summary": "Delete an existing Source",
        "operationId": "deleteSource",
        "description": "Deletes a Source object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "202": {
            "description": "Superkey Source Deletion queued."
          },
          "204": {
            "description": "Source deleted"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["sources"]
      }
    },
    "/sources/{id}/application_types": {
      "get": {
        "summary": "List ApplicationTypes for Source",
        "operationId": "listSourceApplicationTypes",
        "description": "Returns an array of ApplicationType objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          },
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "ApplicationTypes collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationTypesCollection"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["sources"]
      }
    },
    "/sources/{id}/applications": {
      "get": {
        "summary": "List Applications for Source",
        "operationId": "listSourceApplications",
        "description": "Returns an array of Application objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          },
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Applications collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationsCollection"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["sources"]
      }
    },
    "/sources/{id}/authentications": {
      "get": {
        "summary": "List Authentications for Source",
        "operationId": "listSourceAuthentications",
        "description": "Returns an array of Authentication objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          },
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Authentications collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationsCollection"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["sources"]
      }
    },
    "/sources/{id}/check_availability": {
      "post": {
        "summary": "Checks Availability of a Source",
        "operationId": "checkAvailabilitySource",
        "description": "Checks Availability of a Source",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "202": {
            "description": "Availability Check Accepted"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["sources"]
      }
    },
    "/sources/{id}/endpoints": {
      "get": {
        "summary": "List Endpoints for Source",
        "operationId": "listSourceEndpoints",
        "description": "Returns an array of Endpoint objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          },
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoints collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointsCollection"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["sources"]
      }
    },
    "/sources/{id}/pause": {
      "post": {
        "summary": "Pauses a Source",
        "operationId": "pauseSource",
        "description": "Pauses a Source",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Source Paused"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["sources"]
      }
    },
    "/sources/{id}/unpause": {
      "post": {
        "summary": "Un-Pauses a Source",
        "operationId": "unpauseSource",
        "description": "Un-Pauses a Source",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "202": {
            "description": "Source Un-Paused"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["sources"]
      }
    },
    "/app_meta_data": {
      "get": {
        "summary": "List AppMetaData",
        "operationId": "listAllAppMetaData",
        "description": "Returns an array of AppMetaData objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          },
          {
            "$ref": "#/components/parameters/QueryFilter"
          },
          {
            "$ref": "#/components/parameters/QuerySortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "AppMetaData collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppMetaDataCollection"
                }
              }
            }
          }
        },
        "tags": ["app metadata"]
      }
    },
    "/app_meta_data/{id}": {
      "get": {
        "summary": "Show an existing AppMetaData",
        "operationId": "showAppMetaData",
        "description": "Returns a AppMetaData object",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "AppMetaData info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppMetaData"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          }
        },
        "tags": ["app metadata"]
      }
    },
    "/bulk_create": {
      "post": {
        "summary": "Bulk-create a Source and specified sub-resources",
        "operationId": "bulkCreate",
        "description": "Bulk-create a Source and specified sub-resources",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreatePayload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Resources Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": ["sources"]
      }
    }
  },
  "servers": [
    {
      "url": "https://cloud.redhat.com/{basePath}",
      "description": "Production Server",
      "variables": {
        "basePath": {
          "default": "/api/sources/v3.1"
        }
      }
    },
    {
      "url": "http://localhost:{port}/{basePath}",
      "description": "Development Server",
      "variables": {
        "port": {
          "default": "3000"
        },
        "basePath": {
          "default": "/api/sources/v3.1"
        }
      }
    }
  ],
  "components": {
    "parameters": {
      "ID": {
        "name": "id",
        "in": "path",
        "description": "ID of the resource",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^\\d+$"
        }
      },
      "QueryFilter": {
        "in": "query",
        "name": "filter",
        "description": "Filter for querying collections.",
        "required": false,
        "style": "deepObject",
        "explode": true,
        "schema": {
          "type": "object"
        }
      },
      "QueryLimit": {
        "in": "query",
        "name": "limit",
        "description": "The numbers of items to return per page.",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 1000,
          "default": 100
        }
      },
      "QueryOffset": {
        "in": "query",
        "name": "offset",
        "description": "The number of items to skip before starting to collect the result set.",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        }
      },
      "QuerySortBy": {
        "in": "query",
        "name": "sort_by",
        "description": "The list of attribute and order to sort the result set by.",
        "required": false,
        "style": "deepObject",
        "explode": true,
        "schema": {
          "type": "object"
        }
      },
      "x-rh-identity": {
        "description": "RH-Identity header, base64 encoded",
        "in": "header",
        "name": "x-rh-identity",
        "schema": {
          "example": "ewogICAgImlkZW50aXR5IjogewogICAgICAgICJhY2NvdW50X251bWJlciI6ICIxMjM0NSIKICAgIH0KfQ==",
          "format": "byte",
          "type": "string"
        }
      },
      "x-rh-sources-psk": {
        "description": "PSK identity header",
        "in": "header",
        "name": "x-rh-sources-psk",
        "schema": {
          "example": 12345,
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "UserSecurity": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "responses": {
      "BadRequest": {
        "description": "There is a problem either with the parameters or the payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBadRequest"
            }
          }
        }
      },
      "NotFound": {
        "description": "The requested resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorNotFound"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Either the \"x-rh-identity\" or the \"x-rh-sources-psk\" headers are missing, or you don't have enough permission to query the endpoint",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorUnauthorized"
            }
          }
        }
      }
    },
    "schemas": {
      "Application": {
        "type": "object",
        "properties": {
          "application_type_id": {
            "$ref": "#/components/schemas/ID"
          },
          "availability_status": {
            "type": "string"
          },
          "availability_status_error": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "extra": {
            "type": "object"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "last_available_at": {
            "format": "date-time",
            "type": "string"
          },
          "last_checked_at": {
            "format": "date-time",
            "type": "string"
          },
          "source_id": {
            "$ref": "#/components/schemas/ID"
          },
          "updated_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "paused_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ApplicationAuthentication": {
        "type": "object",
        "properties": {
          "application_id": {
            "$ref": "#/components/schemas/ID"
          },
          "authentication_id": {
            "$ref": "#/components/schemas/ID"
          },
          "created_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "updated_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ApplicationAuthenticationsCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationAuthentication"
            }
          }
        }
      },
      "ApplicationType": {
        "type": "object",
        "properties": {
          "created_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "dependent_applications": {
            "type": "object"
          },
          "display_name": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "name": {
            "type": "string"
          },
          "supported_authentication_types": {
            "type": "object"
          },
          "supported_source_types": {
            "type": "object"
          },
          "updated_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ApplicationTypesCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationType"
            }
          }
        }
      },
      "AppMetaData": {
        "type": "object",
        "properties": {
          "created_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "application_type_id": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "name": {
            "type": "string"
          },
          "payload": {
            "type": "object"
          },
          "updated_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AppMetaDataCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppMetaData"
            }
          }
        }
      },
      "ApplicationsCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Application"
            }
          }
        }
      },
      "Authentication": {
        "type": "object",
        "properties": {
          "authtype": {
            "example": "openshift_default",
            "type": "string"
          },
          "availability_status": {
            "type": "string"
          },
          "availability_status_error": {
            "type": "string"
          },
          "extra": {
            "additionalProperties": false,
            "properties": {
              "azure": {
                "additionalProperties": false,
                "properties": {
                  "tenant_id": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "last_available_at": {
            "format": "date-time",
            "type": "string"
          },
          "last_checked_at": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "example": "OpenShift default",
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "resource_id": {
            "$ref": "#/components/schemas/ID"
          },
          "resource_type": {
            "example": "Endpoint",
            "type": "string"
          },
          "source_id": {
            "$ref": "#/components/schemas/ID"
          },
          "username": {
            "example": "user@example.com",
            "type": "string"
          },
          "paused_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AuthenticationsCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Authentication"
            }
          }
        }
      },
      "CollectionLinks": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "next": {
            "type": "string"
          },
          "prev": {
            "type": "string"
          }
        }
      },
      "CollectionMetadata": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          }
        }
      },
      "Endpoint": {
        "type": "object",
        "properties": {
          "availability_status": {
            "type": "string"
          },
          "availability_status_error": {
            "type": "string"
          },
          "certificate_authority": {
            "description": "Optional X.509 Certificate Authority",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "default": {
            "type": "boolean"
          },
          "host": {
            "description": "URI host component",
            "example": "www.example.com",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "last_available_at": {
            "format": "date-time",
            "type": "string"
          },
          "last_checked_at": {
            "format": "date-time",
            "type": "string"
          },
          "path": {
            "description": "URI path component",
            "example": "/api/v1",
            "type": "string"
          },
          "port": {
            "description": "URI port component",
            "example": 80,
            "type": "integer"
          },
          "receptor_node": {
            "description": "Identifier of a receptor node",
            "type": "string"
          },
          "role": {
            "example": "default",
            "type": "string"
          },
          "scheme": {
            "description": "URI scheme component",
            "example": "https",
            "type": "string"
          },
          "source_id": {
            "$ref": "#/components/schemas/ID"
          },
          "updated_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "verify_ssl": {
            "description": "Should SSL be verified",
            "example": true,
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EndpointsCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            }
          }
        }
      },
      "EndpointCreate": {
        "type": "object",
        "properties": {
          "availability_status": {
            "description": "The availability status of the endpoint.",
            "example": "available",
            "enum": ["", "available", "unavailable"],
            "type": "string"
          },
          "certificate_authority": {
            "description": "Optional X.509 Certificate Authority.",
            "example": "Let's Encrypt",
            "type": "string"
          },
          "default": {
            "description": "Mark endpoint as the default endpoint? Each source can only have one default endpoint. It gets set to true by default if the given source has no endpoints.",
            "example": false,
            "type": "boolean"
          },
          "host": {
            "description": "URI host component of the endpoint.",
            "example": "example.com",
            "type": "string"
          },
          "path": {
            "description": "URI path component of the endpoint.",
            "example": "/example/path",
            "type": "string"
          },
          "port": {
            "default": 443,
            "description": "URI port component of the endpoint.",
            "example": 443,
            "type": "integer"
          },
          "receptor_node": {
            "description": "Identifier of a receptor node.",
            "type": "string"
          },
          "role": {
            "description": "The role of the endpoint. It must be unique among the source's endpoints.",
            "type": "string"
          },
          "scheme": {
            "default": "https",
            "description": "The scheme of the protocol.",
            "example": "https",
            "type": "string"
          },
          "source_id": {
            "description": "The id of the source this endpoint relates to.",
            "example": "12",
            "type": "string"
          },
          "verify_ssl": {
            "default": true,
            "description": "Should the SSL certificate be verified?",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "source_id"
        ]
      },
      "ErrorBadRequest": {
        "description": "Error structure for the \"Bad Request\" responses",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "Status of the response",
                  "example": 400,
                  "type": "string"
                },
                "detail": {
                  "description": "Detail of the error",
                  "type": "string",
                  "example": "The provided path parameters are invalid"
                }
              }
            }
          }
        }
      },
      "ErrorNotFound": {
        "description": "Error structure for the \"Not Found\" responses",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "Status of the response",
                  "example": 404,
                  "type": "string"
                },
                "detail": {
                  "description": "Detail of the error",
                  "type": "string",
                  "example": "The resource was not found"
                }
              }
            }
          }
        }
      },
      "ErrorUnauthorized": {
        "description": "Error structure for the \"Unauthorized\" responses",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "Status of the response",
                  "example": 401,
                  "type": "string"
                },
                "detail": {
                  "description": "Detail of the error",
                  "type": "string",
                  "example": "x-rh-identity header missing"
                }
              }
            }
          }
        }
      },
      "GraphQLRequest": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The GraphQL query",
            "default": "{}"
          },
          "operationName": {
            "type": "string",
            "description": "If the Query contains several named operations, the operationName controls which one should be executed",
            "default": ""
          },
          "variables": {
            "type": "object",
            "description": "Optional Query variables",
            "nullable": true
          }
        },
        "required": [
          "query"
        ]
      },
      "GraphQLResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Results from the GraphQL query"
          },
          "errors": {
            "type": "array",
            "description": "Errors resulting from the GraphQL query",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "ID": {
        "type": "string",
        "description": "ID of the resource",
        "pattern": "^\\d+$",
        "readOnly": true
      },
      "RhcConnectionCollection": {
        "description": "Collection of Red Hat Connector Connections along with the metadata",
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RhcConnectionRead"
            }
          }
        }
      },
      "RhcConnectionCreate": {
        "type": "object",
        "properties": {
          "rhc_id": {
            "description": "The UUID of the connection",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "type": "string"
          },
          "extra": {
            "description": "Extra data in JSON format",
            "example": "{\"hello\": \"world\"}",
            "type": "string"
          },
          "source_id": {
            "description": "Hehe",
            "type": "string"
          }
        }
      },
      "RhcConnectionRead": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "rhc_id": {
            "description": "The UUID of the connection",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "readOnly": true,
            "type": "string"
          },
          "extra": {
            "description": "Extra data in JSON format",
            "example": {
              "hello": "world"
            },
            "type": "string"
          },
          "availability_status": {
            "description": "The availability status of the connection",
            "enum": [
              "available",
              "in_progress",
              "partially_available",
              "unavailable"
            ],
            "example": "available",
            "type": "string"
          },
          "last_checked_at": {
            "description": "Timestamp of the last time the availability was checked for the connection",
            "example": "2000-01-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "last_available_at": {
            "description": "Timestamp of the last time the connection was available",
            "example": "2000-01-01T00:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "availability_status_error": {
            "description": "The received error message when polling for the availability status",
            "example": "Destination host unreachable",
            "type": "string"
          },
          "source_ids": {
            "description": "The connection's related sources",
            "example": [
              "92",
              "106",
              "231"
            ],
            "items": {
              "$ref": "#/components/schemas/ID"
            },
            "type": "array"
          }
        }
      },
      "RhcConnectionUpdate": {
        "type": "object",
        "properties": {
          "extra": {
            "description": "Extra data in JSON format",
            "example": "{\"hello\": \"world\"}",
            "type": "string"
          }
        }
      },
      "Source": {
        "type": "object",
        "properties": {
          "app_creation_workflow": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "manual_configuration",
              "account_authorization"
            ]
          },
          "availability_status": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "imported": {
            "type": "string"
          },
          "last_available_at": {
            "format": "date-time",
            "type": "string"
          },
          "last_checked_at": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "example": "Sample Provider",
            "title": "Name",
            "type": "string"
          },
          "source_ref": {
            "type": "string"
          },
          "source_type_id": {
            "$ref": "#/components/schemas/ID"
          },
          "uid": {
            "readOnly": true,
            "title": "Unique ID of the inventory source installation",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "version": {
            "example": "6.5.0",
            "readOnly": true,
            "title": "Version",
            "type": "string"
          },
          "paused_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SourceType": {
        "type": "object",
        "properties": {
          "created_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "icon_url": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "name": {
            "example": "openshift",
            "type": "string"
          },
          "product_name": {
            "example": "OpenShift",
            "type": "string"
          },
          "schema": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "vendor": {
            "example": "Red Hat",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SourceTypesCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceType"
            }
          }
        }
      },
      "SourcesCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Source"
            }
          }
        }
      },
      "BulkCreatePayload": {
        "type": "object",
        "properties": {
          "sources": {
            "description": "Array of Source objects to create. Only supported fields are name + type, source_type_id will automatically\nbe set based on the `source_type_name`.\n",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "source_type_name": {
                  "type": "string",
                  "description": "Source Type from supported types",
                  "enum": [
                    "amazon",
                    "azure",
                    "ansible-tower",
                    "openshift",
                    "satellite",
                    "google",
                    "ibm"
                  ]
                },
                "source_ref": {
                  "type": "string"
                },
                "source_type_id": {
                  "type": "string"
                },
                "app_creation_workflow": {
                  "type": "string",
                  "enum": [
                    "manual_configuration",
                    "account_authorization"
                  ]
                }
              }
            }
          },
          "endpoints": {
            "description": "Array of Endpoint objects to create. The operation looks up the parent source by the `source_name` attribute\nso the `source_name` must match one of the `source`'s names in the payload.\n",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "scheme": {
                  "type": "string"
                },
                "host": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "port": {
                  "type": "integer"
                },
                "verify_ssl": {
                  "type": "boolean"
                },
                "source_name": {
                  "type": "string"
                }
              }
            }
          },
          "applications": {
            "description": "Array of Application objects to create. The operation looks up the parent Source by the `source_name` attribute\nso the `source_name` must match one of the `source`'s names in the payload.\n\napplication_type_id will be automatically looked up and set by the `application_type_name` attribute via regex.\n",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "application_type_name": {
                  "type": "string"
                },
                "application_type_id": {
                  "type": "string"
                },
                "extra": {
                  "type": "object"
                },
                "source_name": {
                  "type": "string"
                }
              }
            }
          },
          "authentications": {
            "description": "Array of Authentications to create. This one is a bit more tricky. `resource_type` tells the action where to look for the parent, must be either application/endpoint/source\n\nif the parent is a source, it looks up by name.\nif the parent is an endpoint, it looks up via host so the hostname must match.\nif the parent is an application, it looks up via application type so the value must match the application type which matches\n",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "authtype": {
                  "type": "string"
                },
                "extra": {
                  "type": "object"
                },
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "resource_name": {
                  "type": "string"
                },
                "resource_type": {
                  "type": "string",
                  "enum": [
                    "application",
                    "endpoint",
                    "source"
                  ]
                }
              }
            }
          }
        }
      },
      "BulkCreateResponse": {
        "type": "object",
        "properties": {
          "superkey": {
            "type": "boolean",
            "default": false
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Source"
            }
          },
          "endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            }
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Application"
            }
          },
          "authentications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Authentication"
            }
          }
        }
      },
      "ErrorUnpermittedParameters": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "422"
                },
                "detail": {
                  "type": "string",
                  "example": "Found unpermitted parameters: xxx, yyy"
                }
              }
            }
          }
        }
      },
      "PartialUpdateResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "422"
                },
                "detail": {
                  "type": "string",
                  "example": "Found unpermitted parameters: xxx, yyy"
                }
              }
            }
          },
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "200"
                },
                "detail": {
                  "type": "string",
                  "example": "Listed parameters in 'resource' has been updated successfully."
                },
                "resource": {
                  "type": "object",
                  "properties": {
                    "availability_status": {
                      "type": "string",
                      "example": "available"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
